name: mask template-each
testcases:

- name: simple test
  steps:
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "array"
          mask:
            template-each:
              item: "item"
              template: "{{title .item}}"
      EOF
  - script: |-
      echo '{"array": ["value1", "value2", "value3"]}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - |
      result.systemout ShouldEqual {"array":["Value1","Value2","Value3"]}
    - result.systemerr ShouldBeEmpty

- name: different name
  steps:
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "array"
          mask:
            template-each:
              item: "val"
              template: "{{title .val}}"
      EOF
  - script: |-
      echo '{"array": ["value1", "value2", "value3"]}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - |
      result.systemout ShouldEqual {"array":["Value1","Value2","Value3"]}
    - result.systemerr ShouldBeEmpty

- name: index
  steps:
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "array"
          mask:
            template-each:
              item: "val"
              index: "idx"
              template: "{{title .val}} {{.idx}}"
      EOF
  - script: |-
      echo '{"array": ["value1", "value2", "value3"]}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - |
      result.systemout ShouldEqual {"array":["Value1 1","Value2 2","Value3 3"]}
    - result.systemerr ShouldBeEmpty
